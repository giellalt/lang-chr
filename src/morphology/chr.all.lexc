! Divvun & Giellatekno - open source grammars for UNDEFINED language
! Copyright © 2012 The University of Tromsø & the Norwegian Sámi Parliament
! http://giellatekno.uit.no & http://divvun.no
!
! This program is free software; you can redistribute and/or modify
! this file under the terms of the GNU General Public License as published by
! the Free Software Foundation, either version 3 of the License, or
! (at your option) any later version. The GNU General Public License
! is found at http://www.gnu.org/licenses/gpl.html. It is
! also available in the file $GTHOME/LICENSE.txt.
!
! Other licensing options are available upon request, please contact
! giellatekno@hum.uit.no or divvun@samediggi.no

! ========================================================================== !
!                Cherokee morphological analyser                      
! ========================================================================== !

!! This file shows the Cherokee multichar symbols and initial lexica.

Multichar_Symbols  !!≈ !!!@CODE@ definitions

!! !!Analysis symbols
!! ----------------
!! The morphological analyses of wordforms of Cherokee are presented
!! in this system in terms of following symbols.

!! (It is highly suggested to follow existing standards when adding new tags).

!! The parts-of-speech could perhaps also be (remove irrelevant):

+N	    !!= * @CODE@ =
+V	    !!= * @CODE@ =
+A	    !!= * @CODE@ =
+Adv    !!= * @CODE@ =
+Pron   !!= * @CODE@ =
+CS	    !!= * @CODE@ =
+CC	    !!= * @CODE@ =
+Adp    !!= * @CODE@ =
+Po	    !!= * @CODE@ =
+Pr	    !!= * @CODE@ =
+Interj !!= * @CODE@ =
+Pcle   !!= * @CODE@ =
+Num    !!= * @CODE@ =

+Def  !!= * @CODE@ =
+Indef !!= * @CODE@ =

!! The parts of speech are further split up into:

+Prop   !!= * @CODE@ =
+Pers   !!= * @CODE@ =
+Dem    !!= * @CODE@ =
+Interr !!= * @CODE@ =
+Refl   !!= * @CODE@ =
+Recipr !!= * @CODE@ =
+Rel    !!= * @CODE@ =
+Indef  !!= * @CODE@ =

!! The Usage extents are marked using the following tags:
 +Err/Sub     !!= * @CODE@ = Substandard forms
 +Use/-Spell  !!= * @CODE@ = Not included in speller

!! The nominals are inflected in the following Number

+Sg   !!= * @CODE@ =
+Pl   !!= * @CODE@ =

!! The verbs can have the following morphological features:

+1sg   !!= * @CODE@ =
+2dl   !!= * @CODE@ =
+2pl   !!= * @CODE@ =
+2sg   !!= * @CODE@ =
+3pl   !!= * @CODE@ =
+3sg   !!= * @CODE@ =
+Edl   !!= * @CODE@ =
+Epl   !!= * @CODE@ =
+Fut   !!= * @CODE@ =
+FutImp   !!= * @CODE@ =
+Hab   !!= * @CODE@ =
+Idl   !!= * @CODE@ =
+ImmPast   !!= * @CODE@ =
+Inf   !!= * @CODE@ =
+Ipl   !!= * @CODE@ =
+Pres   !!= * @CODE@ =
+PresImp   !!= * @CODE@ =
+RemPast   !!= * @CODE@ =
+RepPast   !!= * @CODE@ =

!! Verb prefixes

@U.prefix.1sg@   !!= * @CODE@ =
@U.prefix.2dl@   !!= * @CODE@ =
@U.prefix.2pl@   !!= * @CODE@ =
@U.prefix.2sg@   !!= * @CODE@ =
@U.prefix.3pl@   !!= * @CODE@ =
@U.prefix.3sg@   !!= * @CODE@ =
@U.prefix.Edl@   !!= * @CODE@ =
@U.prefix.Epl@   !!= * @CODE@ =
@U.prefix.Idl@   !!= * @CODE@ =
@U.prefix.Ipl@   !!= * @CODE@ =

%^WS	!!=* @CODE@ = whitespace dummy, for twolc

! Abbreviated words are classified with:

+ABBR !!= * @CODE@ = Abbreviations
+ACR  !!= * @CODE@ = Acronyms

 
!! Special symbols are classified with:
+CLB   !!= * @CODE@ = Clause boundary symbols
+PUNCT !!= * @CODE@ = Other punctuation marks
+LEFT  !!= * @CODE@ = Left part of paired symbols
+RIGHT !!= * @CODE@ = Right part of paired symbols

!! The verbs are syntactically split according to transitivity:
+TV !!= * @CODE@ 
+IV !!= * @CODE@ 

!! Special multiword units are analysed with:
 +Multi !!= * @CODE@ 

!! Non-dictionary words can be recognised with:
 +Guess !!= * @CODE@ 

%>


LEXICON Root
!! The word forms in Cherokee start from the lexeme roots of basic
!! word classes, or optionally from prefixes:
!   Nouns   ;
  VerbPrefixes   ;    !!= * @CODE@ 
!   Adjectives  ;
!   Pronouns    ;
!   Numerals    ;
!   Postpositions ;
!   Particles ;
!! Adjective inflection
!! --------------------
!! The UNDEFINED language adjectives compare.

LEXICON Comparisons
+A+pos:0        Cases   ;
+A+cmp:er       Cases   ;
+A+sup:est      Cases   ;

! vim: set ft=xfst-lexc:

!! Noun inflection
!! ---------------
!! The UNDEFINED language nouns inflect in cases.

LEXICON Cases
+N+sg+nom:0     #   ;
+N+pl+nom:i     #   ;
+N+sg+loc:as    #   ;
+N+pl+loc:ias   #   ;
+N+sg+acc:at    #   ;
+N+pl+acc:iat   #   ;
#:0   Nouns   ;

! vim: set ft=xfst-lexc:

!! Proper noun inflection
!! ----------------------
!! The UNDEFINED language proper nouns inflect in the same cases as regular
!! nouns, but with a colon (':') as separator.

LEXICON ProperNounCases
+N+Prop:%:   Cases  ;
+N+Prop:%:   Cases  ;
+N+Prop:%:   Cases  ;
+N+Prop:%:   Cases  ;
+N+Prop:%:   Cases  ;
+N+Prop:%:   Cases  ;
        -    Nouns  ;

! vim: set ft=xfst-lexc:

!! Verb inflection
!! ---------------


! vim: set ft=xfst-lexc:

LEXICON VerbPrefixes
Verb_Prefixes_Int1 ;
Verb_Prefixes_Int2 ;

LEXICON Verb_Prefixes_Int1
< 0:Ꮵ "@U.prefix.1sg@" > Stems_Present_Int1 ;
< 0:Ꮵ "@U.prefix.1sg@" > Stems_Habitual_Int1 ;
< 0:Ꮣ 0:Ꮵ "@U.prefix.1sg@" > Stems_Future_Int1 ;
< 0:Ꮵ "@U.prefix.1sg@" > Stems_FutImp_Int1 ;
< 0:Ꭰ 0:Ꭹ "@U.prefix.1sg@" > Stems_RemPast_Int1 ;
< 0:Ꭰ 0:Ꭹ "@U.prefix.1sg@" > Stems_RepPast_Int1 ;
< 0:Ꮵ "@U.prefix.1sg@" > Stems_ImmPast_Int1 ;
< 0:Ꮵ "@U.prefix.1sg@" > Stems_PresImp_Int1 ;
< 0:Ꭰ 0:Ꭹ "@U.prefix.1sg@" > Stems_Infinitive_Int1 ;
< 0:Ꭿ "@U.prefix.2sg@" > Stems_Present_Int1 ;
< 0:Ꭿ "@U.prefix.2sg@" > Stems_Habitual_Int1 ;
< 0:Ꮨ "@U.prefix.2sg@" > Stems_Future_Int1 ;
< 0:Ꭿ "@U.prefix.2sg@" > Stems_FutImp_Int1 ;
< 0:Ꮳ "@U.prefix.2sg@" > Stems_RemPast_Int1 ;
< 0:Ꮳ "@U.prefix.2sg@" > Stems_RepPast_Int1 ;
< 0:Ꭿ "@U.prefix.2sg@" > Stems_ImmPast_Int1 ;
< 0:Ꭿ "@U.prefix.2sg@" > Stems_PresImp_Int1 ;
< 0:Ꮳ "@U.prefix.2sg@" > Stems_Infinitive_Int1 ;
< 0:Ꭶ "@U.prefix.3sg@" > Stems_Present_Int1 ;
< 0:Ꭶ "@U.prefix.3sg@" > Stems_Habitual_Int1 ;
< 0:Ꮣ 0:Ꭶ "@U.prefix.3sg@" > Stems_Future_Int1 ;
< 0:Ꭶ "@U.prefix.3sg@" > Stems_FutImp_Int1 ;
< 0:Ꭴ "@U.prefix.3sg@" > Stems_RemPast_Int1 ;
< 0:Ꭴ "@U.prefix.3sg@" > Stems_RepPast_Int1 ;
< 0:Ꭶ "@U.prefix.3sg@" > Stems_ImmPast_Int1 ;
< 0:Ꮻ 0:Ꭶ "@U.prefix.3sg@" > Stems_PresImp_Int1 ;
< 0:Ꭴ "@U.prefix.3sg@" > Stems_Infinitive_Int1 ;
< 0:Ꭲ 0:Ꮒ "@U.prefix.Idl@" > Stems_Present_Int1 ;
< 0:Ꭲ 0:Ꮒ "@U.prefix.Idl@" > Stems_Habitual_Int1 ;
< 0:Ꮣ 0:Ꮒ "@U.prefix.Idl@" > Stems_Future_Int1 ;
< 0:Ꭲ 0:Ꮒ "@U.prefix.Idl@" > Stems_FutImp_Int1 ;
< 0:Ꭹ 0:Ꮒ "@U.prefix.Idl@" > Stems_RemPast_Int1 ;
< 0:Ꭹ 0:Ꮒ "@U.prefix.Idl@" > Stems_RepPast_Int1 ;
< 0:Ꭲ 0:Ꮒ "@U.prefix.Idl@" > Stems_ImmPast_Int1 ;
< 0:Ꭲ 0:Ꮒ "@U.prefix.Idl@" > Stems_PresImp_Int1 ;
< 0:Ꭹ 0:Ꮒ "@U.prefix.Idl@" > Stems_Infinitive_Int1 ;
< 0:Ꭳ 0:Ꮝ 0:Ꮧ "@U.prefix.Edl@" > Stems_Present_Int1 ;
< 0:Ꭳ 0:Ꮝ 0:Ꮧ "@U.prefix.Edl@" > Stems_Habitual_Int1 ;
< 0:Ꮣ 0:Ᏺ 0:Ꮝ 0:Ꮧ "@U.prefix.Edl@" > Stems_Future_Int1 ;
< 0:Ꭳ 0:Ꮝ 0:Ꮧ "@U.prefix.Edl@" > Stems_FutImp_Int1 ;
< 0:Ꭳ 0:Ꭹ 0:Ꮒ "@U.prefix.Edl@" > Stems_RemPast_Int1 ;
< 0:Ꭳ 0:Ꭹ 0:Ꮒ "@U.prefix.Edl@" > Stems_RepPast_Int1 ;
< 0:Ꭳ 0:Ꮝ 0:Ꮧ "@U.prefix.Edl@" > Stems_ImmPast_Int1 ;
< 0:Ꮼ 0:Ꮝ 0:Ꮧ "@U.prefix.Edl@" > Stems_PresImp_Int1 ;
< 0:Ꭳ 0:Ꭹ 0:Ꮒ "@U.prefix.Edl@" > Stems_Infinitive_Int1 ;
< 0:Ꮝ 0:Ꮧ "@U.prefix.2dl@" > Stems_Present_Int1 ;
< 0:Ꮝ 0:Ꮧ "@U.prefix.2dl@" > Stems_Habitual_Int1 ;
< 0:Ꮣ 0:Ꮝ 0:Ꮧ "@U.prefix.2dl@" > Stems_Future_Int1 ;
< 0:Ꮝ 0:Ꮧ "@U.prefix.2dl@" > Stems_FutImp_Int1 ;
< 0:Ꮝ 0:Ꮧ "@U.prefix.2dl@" > Stems_RemPast_Int1 ;
< 0:Ꮝ 0:Ꮧ "@U.prefix.2dl@" > Stems_RepPast_Int1 ;
< 0:Ꮝ 0:Ꮧ "@U.prefix.2dl@" > Stems_ImmPast_Int1 ;
< 0:Ꮝ 0:Ꮧ "@U.prefix.2dl@" > Stems_PresImp_Int1 ;
< 0:Ꮝ 0:Ꮧ "@U.prefix.2dl@" > Stems_Infinitive_Int1 ;
< 0:Ꭲ 0:Ꮧ "@U.prefix.Ipl@" > Stems_Present_Int1 ;
< 0:Ꭲ 0:Ꮧ "@U.prefix.Ipl@" > Stems_Habitual_Int1 ;
< 0:Ꮣ 0:Ꮧ "@U.prefix.Ipl@" > Stems_Future_Int1 ;
< 0:Ꭲ 0:Ꮧ "@U.prefix.Ipl@" > Stems_FutImp_Int1 ;
< 0:Ꭲ 0:Ꭹ "@U.prefix.Ipl@" > Stems_RemPast_Int1 ;
< 0:Ꭲ 0:Ꭹ "@U.prefix.Ipl@" > Stems_RepPast_Int1 ;
< 0:Ꭲ 0:Ꮧ "@U.prefix.Ipl@" > Stems_ImmPast_Int1 ;
< 0:Ꭲ 0:Ꮧ "@U.prefix.Ipl@" > Stems_PresImp_Int1 ;
< 0:Ꭲ 0:Ꭹ "@U.prefix.Ipl@" > Stems_Infinitive_Int1 ;
< 0:Ꭳ 0:Ꮵ "@U.prefix.Epl@" > Stems_Present_Int1 ;
< 0:Ꭳ 0:Ꮵ "@U.prefix.Epl@" > Stems_Habitual_Int1 ;
< 0:Ꮣ 0:Ᏺ 0:Ꮵ "@U.prefix.Epl@" > Stems_Future_Int1 ;
< 0:Ꭳ 0:Ꮵ "@U.prefix.Epl@" > Stems_FutImp_Int1 ;
< 0:Ꭳ 0:Ꭹ "@U.prefix.Epl@" > Stems_RemPast_Int1 ;
< 0:Ꭳ 0:Ꭹ "@U.prefix.Epl@" > Stems_RepPast_Int1 ;
< 0:Ꭳ 0:Ꮵ "@U.prefix.Epl@" > Stems_ImmPast_Int1 ;
< 0:Ꮼ 0:Ꮵ "@U.prefix.Epl@" > Stems_PresImp_Int1 ;
< 0:Ꭳ 0:Ꭹ "@U.prefix.Epl@" > Stems_Infinitive_Int1 ;
< 0:Ꭲ 0:Ꮵ "@U.prefix.2pl@" > Stems_Present_Int1 ;
< 0:Ꭲ 0:Ꮵ "@U.prefix.2pl@" > Stems_Habitual_Int1 ;
< 0:Ꮣ 0:Ꮵ "@U.prefix.2pl@" > Stems_Future_Int1 ;
< 0:Ꭲ 0:Ꮵ "@U.prefix.2pl@" > Stems_FutImp_Int1 ;
< 0:Ꭲ 0:Ꮵ "@U.prefix.2pl@" > Stems_RemPast_Int1 ;
< 0:Ꭲ 0:Ꮵ "@U.prefix.2pl@" > Stems_RepPast_Int1 ;
< 0:Ꭲ 0:Ꮵ "@U.prefix.2pl@" > Stems_ImmPast_Int1 ;
< 0:Ꭲ 0:Ꮵ "@U.prefix.2pl@" > Stems_PresImp_Int1 ;
< 0:Ꭲ 0:Ꮵ "@U.prefix.2pl@" > Stems_Infinitive_Int1 ;
< 0:Ꭰ 0:Ꮒ "@U.prefix.3pl@" > Stems_Present_Int1 ;
< 0:Ꭰ 0:Ꮒ "@U.prefix.3pl@" > Stems_Habitual_Int1 ;
< 0:Ꮫ 0:Ꮒ "@U.prefix.3pl@" > Stems_Future_Int1 ;
< 0:Ꭰ 0:Ꮒ "@U.prefix.3pl@" > Stems_FutImp_Int1 ;
< 0:Ꭴ 0:Ꮒ "@U.prefix.3pl@" > Stems_RemPast_Int1 ;
< 0:Ꭴ 0:Ꮒ "@U.prefix.3pl@" > Stems_RepPast_Int1 ;
< 0:Ꭰ 0:Ꮒ "@U.prefix.3pl@" > Stems_ImmPast_Int1 ;
< 0:Ꮹ 0:Ꮒ "@U.prefix.3pl@" > Stems_PresImp_Int1 ;
< 0:Ꭴ 0:Ꮒ "@U.prefix.3pl@" > Stems_Infinitive_Int1 ;

LEXICON Verb_Prefixes_Int2
< 0:Ꮵ "@U.prefix.1sg@" > Stems_Present_Int2 ;
< 0:Ꮵ "@U.prefix.1sg@" > Stems_Habitual_Int2 ;
< 0:Ꮣ 0:Ꮵ "@U.prefix.1sg@" > Stems_Future_Int2 ;
< 0:Ꮵ "@U.prefix.1sg@" > Stems_FutImp_Int2 ;
< 0:Ꭰ 0:Ꭹ "@U.prefix.1sg@" > Stems_RemPast_Int2 ;
< 0:Ꭰ 0:Ꭹ "@U.prefix.1sg@" > Stems_RepPast_Int2 ;
< 0:Ꮵ "@U.prefix.1sg@" > Stems_ImmPast_Int2 ;
< 0:Ꮵ "@U.prefix.1sg@" > Stems_PresImp_Int2 ;
< 0:Ꭰ 0:Ꭹ "@U.prefix.1sg@" > Stems_Infinitive_Int2 ;
< 0:Ꭿ "@U.prefix.2sg@" > Stems_Present_Int2 ;
< 0:Ꭿ "@U.prefix.2sg@" > Stems_Habitual_Int2 ;
< 0:Ꮨ "@U.prefix.2sg@" > Stems_Future_Int2 ;
< 0:Ꭿ "@U.prefix.2sg@" > Stems_FutImp_Int2 ;
< 0:Ꮳ "@U.prefix.2sg@" > Stems_RemPast_Int2 ;
< 0:Ꮳ "@U.prefix.2sg@" > Stems_RepPast_Int2 ;
< 0:Ꭿ "@U.prefix.2sg@" > Stems_ImmPast_Int2 ;
< 0:Ꭿ "@U.prefix.2sg@" > Stems_PresImp_Int2 ;
< 0:Ꮳ "@U.prefix.2sg@" > Stems_Infinitive_Int2 ;
< 0:Ꭶ "@U.prefix.3sg@" > Stems_Present_Int2 ;
< 0:Ꭶ "@U.prefix.3sg@" > Stems_Habitual_Int2 ;
< 0:Ꮣ 0:Ꭶ "@U.prefix.3sg@" > Stems_Future_Int2 ;
< 0:Ꭶ "@U.prefix.3sg@" > Stems_FutImp_Int2 ;
< 0:Ꭴ 0:Ꮹ "@U.prefix.3sg@" > Stems_RemPast_Int2 ;
< 0:Ꭴ 0:Ꮹ "@U.prefix.3sg@" > Stems_RepPast_Int2 ;
< 0:Ꭶ "@U.prefix.3sg@" > Stems_ImmPast_Int2 ;
< 0:Ꮻ 0:Ꭶ "@U.prefix.3sg@" > Stems_PresImp_Int2 ;
< 0:Ꭴ 0:Ꮹ "@U.prefix.3sg@" > Stems_Infinitive_Int2 ;
< 0:Ꭲ 0:Ꮒ "@U.prefix.Idl@" > Stems_Present_Int2 ;
< 0:Ꭲ 0:Ꮒ "@U.prefix.Idl@" > Stems_Habitual_Int2 ;
< 0:Ꮣ 0:Ꮒ "@U.prefix.Idl@" > Stems_Future_Int2 ;
< 0:Ꭲ 0:Ꮒ "@U.prefix.Idl@" > Stems_FutImp_Int2 ;
< 0:Ꭹ 0:Ꮒ "@U.prefix.Idl@" > Stems_RemPast_Int2 ;
< 0:Ꭹ 0:Ꮒ "@U.prefix.Idl@" > Stems_RepPast_Int2 ;
< 0:Ꭲ 0:Ꮒ "@U.prefix.Idl@" > Stems_ImmPast_Int2 ;
< 0:Ꭲ 0:Ꮒ "@U.prefix.Idl@" > Stems_PresImp_Int2 ;
< 0:Ꭹ 0:Ꮒ "@U.prefix.Idl@" > Stems_Infinitive_Int2 ;
< 0:Ꭳ 0:Ꮝ 0:Ꮧ "@U.prefix.Edl@" > Stems_Present_Int2 ;
< 0:Ꭳ 0:Ꮝ 0:Ꮧ "@U.prefix.Edl@" > Stems_Habitual_Int2 ;
< 0:Ꮣ 0:Ᏺ 0:Ꮝ 0:Ꮧ "@U.prefix.Edl@" > Stems_Future_Int2 ;
< 0:Ꭳ 0:Ꮝ 0:Ꮧ "@U.prefix.Edl@" > Stems_FutImp_Int2 ;
< 0:Ꭳ 0:Ꭹ 0:Ꮒ "@U.prefix.Edl@" > Stems_RemPast_Int2 ;
< 0:Ꭳ 0:Ꭹ 0:Ꮒ "@U.prefix.Edl@" > Stems_RepPast_Int2 ;
< 0:Ꭳ 0:Ꮝ 0:Ꮧ "@U.prefix.Edl@" > Stems_ImmPast_Int2 ;
< 0:Ꮼ 0:Ꮝ 0:Ꮧ "@U.prefix.Edl@" > Stems_PresImp_Int2 ;
< 0:Ꭳ 0:Ꭹ 0:Ꮒ "@U.prefix.Edl@" > Stems_Infinitive_Int2 ;
< 0:Ꮝ 0:Ꮧ "@U.prefix.2dl@" > Stems_Present_Int2 ;
< 0:Ꮝ 0:Ꮧ "@U.prefix.2dl@" > Stems_Habitual_Int2 ;
< 0:Ꮣ 0:Ꮝ 0:Ꮧ "@U.prefix.2dl@" > Stems_Future_Int2 ;
< 0:Ꮝ 0:Ꮧ "@U.prefix.2dl@" > Stems_FutImp_Int2 ;
< 0:Ꮝ 0:Ꮧ "@U.prefix.2dl@" > Stems_RemPast_Int2 ;
< 0:Ꮝ 0:Ꮧ "@U.prefix.2dl@" > Stems_RepPast_Int2 ;
< 0:Ꮝ 0:Ꮧ "@U.prefix.2dl@" > Stems_ImmPast_Int2 ;
< 0:Ꮝ 0:Ꮧ "@U.prefix.2dl@" > Stems_PresImp_Int2 ;
< 0:Ꮝ 0:Ꮧ "@U.prefix.2dl@" > Stems_Infinitive_Int2 ;
< 0:Ꭲ 0:Ꮧ "@U.prefix.Ipl@" > Stems_Present_Int2 ;
< 0:Ꭲ 0:Ꮧ "@U.prefix.Ipl@" > Stems_Habitual_Int2 ;
< 0:Ꮣ 0:Ꮧ "@U.prefix.Ipl@" > Stems_Future_Int2 ;
< 0:Ꭲ 0:Ꮧ "@U.prefix.Ipl@" > Stems_FutImp_Int2 ;
< 0:Ꭲ 0:Ꭹ "@U.prefix.Ipl@" > Stems_RemPast_Int2 ;
< 0:Ꭲ 0:Ꭹ "@U.prefix.Ipl@" > Stems_RepPast_Int2 ;
< 0:Ꭲ 0:Ꮧ "@U.prefix.Ipl@" > Stems_ImmPast_Int2 ;
< 0:Ꭲ 0:Ꮧ "@U.prefix.Ipl@" > Stems_PresImp_Int2 ;
< 0:Ꭲ 0:Ꭹ "@U.prefix.Ipl@" > Stems_Infinitive_Int2 ;
< 0:Ꭳ 0:Ꮵ "@U.prefix.Epl@" > Stems_Present_Int2 ;
< 0:Ꭳ 0:Ꮵ "@U.prefix.Epl@" > Stems_Habitual_Int2 ;
< 0:Ꮣ 0:Ᏺ 0:Ꮵ "@U.prefix.Epl@" > Stems_Future_Int2 ;
< 0:Ꭳ 0:Ꮵ "@U.prefix.Epl@" > Stems_FutImp_Int2 ;
< 0:Ꭳ 0:Ꭹ "@U.prefix.Epl@" > Stems_RemPast_Int2 ;
< 0:Ꭳ 0:Ꭹ "@U.prefix.Epl@" > Stems_RepPast_Int2 ;
< 0:Ꭳ 0:Ꮵ "@U.prefix.Epl@" > Stems_ImmPast_Int2 ;
< 0:Ꮼ 0:Ꮵ "@U.prefix.Epl@" > Stems_PresImp_Int2 ;
< 0:Ꭳ 0:Ꭹ "@U.prefix.Epl@" > Stems_Infinitive_Int2 ;
< 0:Ꭲ 0:Ꮵ "@U.prefix.2pl@" > Stems_Present_Int2 ;
< 0:Ꭲ 0:Ꮵ "@U.prefix.2pl@" > Stems_Habitual_Int2 ;
< 0:Ꮣ 0:Ꮵ "@U.prefix.2pl@" > Stems_Future_Int2 ;
< 0:Ꭲ 0:Ꮵ "@U.prefix.2pl@" > Stems_FutImp_Int2 ;
< 0:Ꭲ 0:Ꮵ "@U.prefix.2pl@" > Stems_RemPast_Int2 ;
< 0:Ꭲ 0:Ꮵ "@U.prefix.2pl@" > Stems_RepPast_Int2 ;
< 0:Ꭲ 0:Ꮵ "@U.prefix.2pl@" > Stems_ImmPast_Int2 ;
< 0:Ꭲ 0:Ꮵ "@U.prefix.2pl@" > Stems_PresImp_Int2 ;
< 0:Ꭲ 0:Ꮵ "@U.prefix.2pl@" > Stems_Infinitive_Int2 ;
< 0:Ꭰ 0:Ꮒ "@U.prefix.3pl@" > Stems_Present_Int2 ;
< 0:Ꭰ 0:Ꮒ "@U.prefix.3pl@" > Stems_Habitual_Int2 ;
< 0:Ꮫ 0:Ꮒ "@U.prefix.3pl@" > Stems_Future_Int2 ;
< 0:Ꭰ 0:Ꮒ "@U.prefix.3pl@" > Stems_FutImp_Int2 ;
< 0:Ꭴ 0:Ꮒ "@U.prefix.3pl@" > Stems_RemPast_Int2 ;
< 0:Ꭴ 0:Ꮒ "@U.prefix.3pl@" > Stems_RepPast_Int2 ;
< 0:Ꭰ 0:Ꮒ "@U.prefix.3pl@" > Stems_ImmPast_Int2 ;
< 0:Ꮹ 0:Ꮒ "@U.prefix.3pl@" > Stems_PresImp_Int2 ;
< 0:Ꭴ 0:Ꮒ "@U.prefix.3pl@" > Stems_Infinitive_Int2 ;

LEXICON Suffix_Present_ha
+V+Pres:Ꭽ  PersonFeatures ;

LEXICON Suffix_Present_ga
+V+Pres:Ꭶ  PersonFeatures ;

LEXICON Suffix_Present_a
+V+Pres:Ꭰ  PersonFeatures ;

LEXICON Suffix_Habitual_hoi
+V+Hab:ᎰᎢ  PersonFeatures ;

LEXICON Suffix_Habitual_goi
+V+Hab:ᎪᎢ  PersonFeatures ;

LEXICON Suffix_Habitual_sgoi
+V+Hab:ᏍᎪᎢ  PersonFeatures ;

LEXICON Suffix_Future_tli
+V+Fut:Ꮯ  PersonFeatures ;

LEXICON Suffix_Future_si
+V+Fut:Ꮟ  PersonFeatures ;

LEXICON Suffix_Future_hi
+V+Fut:Ꭿ  PersonFeatures ;

LEXICON Suffix_Future_i
+V+Fut:Ꭲ  PersonFeatures ;

LEXICON Suffix_Future_li
+V+Fut:Ꮅ  PersonFeatures ;

LEXICON Suffix_FutImp_tlvi
+V+FutImp:ᏢᎢ  PersonFeatures ;

LEXICON Suffix_FutImp_svi
+V+FutImp:ᏒᎢ  PersonFeatures ;

LEXICON Suffix_FutImp_hvi
+V+FutImp:ᎲᎢ  PersonFeatures ;

LEXICON Suffix_FutImp_vi
+V+FutImp:ᎥᎢ  PersonFeatures ;

LEXICON Suffix_FutImp_lvi
+V+FutImp:ᎸᎢ  PersonFeatures ;

LEXICON Suffix_RemPast_tlvi
+V+RemPast:ᏢᎢ  PersonFeatures ;

LEXICON Suffix_RemPast_svi
+V+RemPast:ᏒᎢ  PersonFeatures ;

LEXICON Suffix_RemPast_hvi
+V+RemPast:ᎲᎢ  PersonFeatures ;

LEXICON Suffix_RemPast_vi
+V+RemPast:ᎥᎢ  PersonFeatures ;

LEXICON Suffix_RemPast_lvi
+V+RemPast:ᎸᎢ  PersonFeatures ;

LEXICON Suffix_RepPast_tlei
+V+RepPast:ᏞᎢ  PersonFeatures ;

LEXICON Suffix_RepPast_sei
+V+RepPast:ᏎᎢ  PersonFeatures ;

LEXICON Suffix_RepPast_hei
+V+RepPast:ᎮᎢ  PersonFeatures ;

LEXICON Suffix_RepPast_ei
+V+RepPast:ᎡᎢ  PersonFeatures ;

LEXICON Suffix_RepPast_lei
+V+RepPast:ᎴᎢ  PersonFeatures ;

LEXICON Suffix_ImmPast_ga
+V+ImmPast:Ꭶ  PersonFeatures ;

LEXICON Suffix_ImmPast_hi
+V+ImmPast:Ꭿ  PersonFeatures ;

LEXICON Suffix_ImmPast_ta
+V+ImmPast:Ꮤ  PersonFeatures ;

LEXICON Suffix_ImmPast_da
+V+ImmPast:Ꮣ  PersonFeatures ;

LEXICON Suffix_ImmPast_na
+V+ImmPast:Ꮎ  PersonFeatures ;

LEXICON Suffix_PresImp_ga
+V+PresImp:Ꭶ  PersonFeatures ;

LEXICON Suffix_PresImp_hi
+V+PresImp:Ꭿ  PersonFeatures ;

LEXICON Suffix_PresImp_ta
+V+PresImp:Ꮤ  PersonFeatures ;

LEXICON Suffix_PresImp_da
+V+PresImp:Ꮣ  PersonFeatures ;

LEXICON Suffix_PresImp_na
+V+PresImp:Ꮎ  PersonFeatures ;

! LEXICON Suffix_ImmPast_ga
! +V+ImmPast:Ꭶ  PersonFeatures ;

! LEXICON Suffix_ImmPast_hi
! +V+ImmPast:Ꭿ  PersonFeatures ;

LEXICON Suffix_Infinitive_sdi
+V+Inf:ᏍᏗ  PersonFeatures ;

LEXICON Suffix_Infinitive_di
+V+Inf:Ꮧ  PersonFeatures ;

LEXICON PersonFeatures

< "+1sg":0 "@U.prefix.1sg@" > # ;
< "+2dl":0 "@U.prefix.2dl@" > # ;
< "+2pl":0 "@U.prefix.2pl@" > # ;
< "+2sg":0 "@U.prefix.2sg@" > # ;
< "+3pl":0 "@U.prefix.3pl@" > # ;
< "+3sg":0 "@U.prefix.3sg@" > # ;
< "+Edl":0 "@U.prefix.Edl@" > # ;
< "+Epl":0 "@U.prefix.Epl@" > # ;
< "+Idl":0 "@U.prefix.Idl@" > # ;
< "+Ipl":0 "@U.prefix.Ipl@" > # ;
!! Adjectives
!! ----------
!! Adjectives in UNDEFINED language describe things.

LEXICON Adjectives
adjective    Comparisons   ;

! vim: set ft=xfst-lexc:
!! Nouns
!! -----
!! Nouns in UNDEFINED language are things.

LEXICON Nouns
noun    Cases   ;

! vim: set ft=xfst-lexc:
!! Numerals
!! --------
!! Numerals in UNDEFINED language are numbers.

LEXICON Numerals
numeral    Cases   ;

! vim: set ft=xfst-lexc:
!! Prefixes
!! --------
!! Prefixes in UNDEFINED language are bound to beginning of other words.

! LEXICON Prefixes
! nounprefix-     Nouns   ;
! verbprefix-     Verbs   ;


! vim: set ft=xfst-lexc:
!! Pronouns
!! --------
!! Pronouns in UNDEFINED language are references to things.

LEXICON Pronouns
pronoun    Cases   ;

! vim: set ft=xfst-lexc:
!! Verbs
!! -----
!! Verbs in CHEROKEE language are actions.

LEXICON Stems_Present_Int1
ᏃᎯ Suffix_Present_ha ;
ᏁᏦᎯ Suffix_Present_ha ;
ᎶᎣᏍ Suffix_Present_ga ;
ᎾᏩᏘ Suffix_Present_ha ;
ᏁᏩᏘ Suffix_Present_ha ;

LEXICON Stems_Habitual_Int1
ᏃᎯ Suffix_Habitual_hoi ;
ᏁᏦᎯ Suffix_Habitual_hoi ;
ᎶᎣᏍ Suffix_Habitual_goi ;
ᎾᏩᏘ Suffix_Habitual_sgoi ;
ᏁᏩᏘ Suffix_Habitual_sgoi ;

LEXICON Stems_Future_Int1
Ꮓ Suffix_Future_tli ;
ᏁᏦ Suffix_Future_tli ;
ᎶᎣ Suffix_Future_si ;
ᎾᏩᏛ Suffix_Future_hi ;
ᏁᏩᏛ Suffix_Future_hi ;

LEXICON Stems_FutImp_Int1
Ꮓ Suffix_FutImp_tlvi ;
ᏁᏦ Suffix_FutImp_tlvi ;
ᎶᎣ Suffix_FutImp_svi ;
ᎾᏩᏛ Suffix_FutImp_hvi ;
ᏁᏩᏛ Suffix_FutImp_hvi ;

LEXICON Stems_RemPast_Int1
Ꮓ Suffix_RemPast_tlvi ;
ᏁᏦ Suffix_RemPast_tlvi ;
ᎶᎣ Suffix_RemPast_svi ;
ᎾᏩᏛ Suffix_RemPast_hvi ;
ᏁᏩᏛ Suffix_RemPast_hvi ;

LEXICON Stems_RepPast_Int1
Ꮓ Suffix_RepPast_tlei ;
ᏁᏦ Suffix_RepPast_tlei ;
ᎶᎣ Suffix_RepPast_sei ;
ᎾᏩᏛ Suffix_RepPast_hei ;
ᏁᏩᏛ Suffix_RepPast_hei ;

LEXICON Stems_ImmPast_Int1
Ꮓ Suffix_ImmPast_ga ;
ᏁᏦ Suffix_ImmPast_ga ;
ᎶᎣ Suffix_ImmPast_hi ;
ᎾᏩ Suffix_ImmPast_ta ;
ᏁᏩ Suffix_ImmPast_ta ;

LEXICON Stems_PresImp_Int1
Ꮓ Suffix_PresImp_ga ;
ᏁᏦ Suffix_PresImp_ga ;
ᎶᎣ Suffix_PresImp_hi ;
ᎾᏩ Suffix_PresImp_ta ;
ᏁᏩ Suffix_PresImp_ta ;

LEXICON Stems_Infinitive_Int1
ᏃᎯ Suffix_Infinitive_sdi ;
ᏁᏦᎯ Suffix_Infinitive_sdi ;
ᎶᎣᎯ Suffix_Infinitive_sdi ;
ᎾᏩᏛ Suffix_Infinitive_di ;
ᏁᏩᏛ Suffix_Infinitive_di ;

LEXICON Stems_Present_Int2
Ᏸ Suffix_Present_a ;
ᏂᏙ Suffix_Present_ha ;
ᎧᎲ Suffix_Present_a ;

LEXICON Stems_Habitual_Int2
Ᏸ Suffix_Habitual_sgoi ;
ᏂᏙ Suffix_Habitual_hoi ;
ᎧᎲ Suffix_Habitual_sgoi ;

LEXICON Stems_Future_Int2
Ꮿ Suffix_Future_i ;
ᏂᏙ Suffix_Future_li ;
ᎧᎲ Suffix_Future_si ;

LEXICON Stems_FutImp_Int2
Ꮿ Suffix_FutImp_vi ;
ᏂᏙ Suffix_FutImp_lvi ;
ᎧᎲ Suffix_FutImp_svi ;

LEXICON Stems_RemPast_Int2
Ꮿ Suffix_RemPast_vi ;
ᏂᏙ Suffix_RemPast_lvi ;
ᎧᎲ Suffix_RemPast_svi ;

LEXICON Stems_RepPast_Int2
Ꮿ Suffix_RepPast_ei ;
ᏂᏙ Suffix_RepPast_lei ;
ᎧᎲ Suffix_RepPast_sei ;

LEXICON Stems_ImmPast_Int2
Ꮿ Suffix_ImmPast_ga ;
Ꮒ Suffix_ImmPast_da ;
ᎧᎲ Suffix_ImmPast_na ;

LEXICON Stems_PresImp_Int2
Ꮿ Suffix_PresImp_ga ;
Ꮒ Suffix_PresImp_da ;
ᎧᎲ Suffix_PresImp_na ;

LEXICON Stems_Infinitive_Int2
Ᏸ Suffix_Infinitive_sdi ;
ᏂᏙ Suffix_Infinitive_sdi ;
ᎧᎲ Suffix_Infinitive_sdi ;



! vim: set ft=xfst-lexc:
