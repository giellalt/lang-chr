# Makefile.in generated by automake 1.14.1 from Makefile.am.
# src/phonology/Makefile.  Generated from Makefile.in by configure.

# Copyright (C) 1994-2013 Free Software Foundation, Inc.

# This Makefile.in is free software; the Free Software Foundation
# gives unlimited permission to copy and/or distribute it,
# with or without modifications, as long as this notice is preserved.

# This program is distributed in the hope that it will be useful,
# but WITHOUT ANY WARRANTY, to the extent permitted by law; without
# even the implied warranty of MERCHANTABILITY or FITNESS FOR A
# PARTICULAR PURPOSE.



####### Source file defs: ########

####### Source file defs: ########

########################################
########## Twolc build rules. ##########
########################################

###########################################
########## XFScript build rules. ##########
###########################################


am__is_gnu_make = test -n '$(MAKEFILE_LIST)' && test -n '$(MAKELEVEL)'
am__make_running_with_option = \
  case $${target_option-} in \
      ?) ;; \
      *) echo "am__make_running_with_option: internal error: invalid" \
              "target option '$${target_option-}' specified" >&2; \
         exit 1;; \
  esac; \
  has_opt=no; \
  sane_makeflags=$$MAKEFLAGS; \
  if $(am__is_gnu_make); then \
    sane_makeflags=$$MFLAGS; \
  else \
    case $$MAKEFLAGS in \
      *\\[\ \	]*) \
        bs=\\; \
        sane_makeflags=`printf '%s\n' "$$MAKEFLAGS" \
          | sed "s/$$bs$$bs[$$bs $$bs	]*//g"`;; \
    esac; \
  fi; \
  skip_next=no; \
  strip_trailopt () \
  { \
    flg=`printf '%s\n' "$$flg" | sed "s/$$1.*$$//"`; \
  }; \
  for flg in $$sane_makeflags; do \
    test $$skip_next = yes && { skip_next=no; continue; }; \
    case $$flg in \
      *=*|--*) continue;; \
        -*I) strip_trailopt 'I'; skip_next=yes;; \
      -*I?*) strip_trailopt 'I';; \
        -*O) strip_trailopt 'O'; skip_next=yes;; \
      -*O?*) strip_trailopt 'O';; \
        -*l) strip_trailopt 'l'; skip_next=yes;; \
      -*l?*) strip_trailopt 'l';; \
      -[dEDm]) skip_next=yes;; \
      -[JT]) skip_next=yes;; \
    esac; \
    case $$flg in \
      *$$target_option*) has_opt=yes; break;; \
    esac; \
  done; \
  test $$has_opt = yes
am__make_dryrun = (target_option=n; $(am__make_running_with_option))
am__make_keepgoing = (target_option=k; $(am__make_running_with_option))
pkgdatadir = $(datadir)/giella-chr
pkgincludedir = $(includedir)/giella-chr
pkglibdir = $(libdir)/giella-chr
pkglibexecdir = $(libexecdir)/giella-chr
am__cd = CDPATH="$${ZSH_VERSION+.}$(PATH_SEPARATOR)" && cd
install_sh_DATA = $(install_sh) -c -m 644
install_sh_PROGRAM = $(install_sh) -c
install_sh_SCRIPT = $(install_sh) -c
INSTALL_HEADER = $(INSTALL_DATA)
transform = $(program_transform_name)
NORMAL_INSTALL = :
PRE_INSTALL = :
POST_INSTALL = :
NORMAL_UNINSTALL = :
PRE_UNINSTALL = :
POST_UNINSTALL = :
build_triplet = x86_64-apple-darwin12.5.0
host_triplet = x86_64-apple-darwin12.5.0
DIST_COMMON = $(top_srcdir)/am-shared/src-phonology-dir-include.am \
	$(top_srcdir)/am-shared/twolc-include.am \
	$(top_srcdir)/am-shared/xfscript-include.am \
	$(srcdir)/Makefile.in $(srcdir)/Makefile.am
#am__append_1 = $(GTLANG)-phon.hfst
am__append_2 = $(GTLANG)-phon.xfst
subdir = src/phonology
ACLOCAL_M4 = $(top_srcdir)/aclocal.m4
am__aclocal_m4_deps = $(top_srcdir)/m4/ax_compare_version.m4 \
	$(top_srcdir)/m4/ax_python_module.m4 \
	$(top_srcdir)/m4/giellatekno.m4 $(top_srcdir)/m4/hfst.m4 \
	$(top_srcdir)/configure.ac
am__configure_deps = $(am__aclocal_m4_deps) $(CONFIGURE_DEPENDENCIES) \
	$(ACLOCAL_M4)
mkinstalldirs = $(install_sh) -d
CONFIG_CLEAN_FILES =
CONFIG_CLEAN_VPATH_FILES =
AM_V_P = $(am__v_P_$(V))
am__v_P_ = $(am__v_P_$(AM_DEFAULT_VERBOSITY))
am__v_P_0 = false
am__v_P_1 = :
AM_V_GEN = $(am__v_GEN_$(V))
am__v_GEN_ = $(am__v_GEN_$(AM_DEFAULT_VERBOSITY))
am__v_GEN_0 = @echo "  GEN     " $@;
am__v_GEN_1 = 
AM_V_at = $(am__v_at_$(V))
am__v_at_ = $(am__v_at_$(AM_DEFAULT_VERBOSITY))
am__v_at_0 = @
am__v_at_1 = 
SOURCES =
DIST_SOURCES =
am__can_run_installinfo = \
  case $$AM_UPDATE_INFO_DIR in \
    n|no|NO) false;; \
    *) (install-info --version) >/dev/null 2>&1;; \
  esac
DATA = $(noinst_DATA)
am__tagged_files = $(HEADERS) $(SOURCES) $(TAGS_FILES) $(LISP)
DISTFILES = $(DIST_COMMON) $(DIST_SOURCES) $(TEXINFOS) $(EXTRA_DIST)
ACLOCAL = ${SHELL} /Users/arppe/main/langs/chr/build-aux/missing aclocal-1.14
AMTAR = $${TAR-tar}
AM_DEFAULT_VERBOSITY = 0
AUTOCONF = ${SHELL} /Users/arppe/main/langs/chr/build-aux/missing autoconf
AUTOHEADER = ${SHELL} /Users/arppe/main/langs/chr/build-aux/missing autoheader
AUTOMAKE = ${SHELL} /Users/arppe/main/langs/chr/build-aux/missing automake-1.14
AWK = gawk
CYGPATH_W = echo
CYGWINJAVAPATH = echo
DEFS = -DPACKAGE_NAME=\"giella-chr\" -DPACKAGE_TARNAME=\"giella-chr\" -DPACKAGE_VERSION=\"20110617\" -DPACKAGE_STRING=\"giella-chr\ 20110617\" -DPACKAGE_BUGREPORT=\"feedback@divvun.no\" -DPACKAGE_URL=\"http://divvun.no\" -DPACKAGE=\"giella-chr\" -DVERSION=\"20110617\"
DIALECTS = 
ECHO_C = \c
ECHO_N = 
ECHO_T = 
FORREST = /Users/arppe/Documents/forrest/bin/forrest
GTCORE = /Users/arppe/main/gtcore
GTCORESH = /Users/arppe/main/gtcore/scripts/gt-core.sh
GTD_VERSION = /Users/arppe/main/gtcore/scripts/gt-version.sh
GTLANG = chr
GTLANG2 = chr
GTMAINTAINER = 
GZIP = /usr/bin/gzip
HFST_COMPOSE = /usr/local/bin/hfst-compose
HFST_COMPOSE_INTERSECT = /usr/local/bin/hfst-compose-intersect
HFST_CONCATENATE = /usr/local/bin/hfst-concatenate
HFST_CONJUNCT = /usr/local/bin/hfst-conjunct
HFST_DETERMINIZE = /usr/local/bin/hfst-determinize
HFST_DISJUNCT = /usr/local/bin/hfst-disjunct
HFST_FOMA = /usr/local/bin/hfst-foma
HFST_FST2FST = /usr/local/bin/hfst-fst2fst
HFST_FST2STRINGS = /usr/local/bin/hfst-fst2strings
HFST_FST2TXT = /usr/local/bin/hfst-fst2txt
HFST_INFO = /usr/local/bin/hfst-info
HFST_INVERT = /usr/local/bin/hfst-invert
HFST_LEXC = /usr/local/bin/hfst-lexc
HFST_LEXC2FST = /usr/local/bin/hfst-lexc2fst
HFST_LOOKUP = /usr/local/bin/hfst-lookup
HFST_MINIMIZE = /usr/local/bin/hfst-minimize
HFST_MINIMIZE_SPELLER = /usr/local/bin/hfst-remove-epsilons
HFST_MINUS = /usr/local/bin/hfst-minus
HFST_MULTIPLY = /usr/local/bin/hfst-multiply
HFST_NAME = /usr/local/bin/hfst-name
HFST_OSPELL = /usr/local/bin/hfst-ospell
HFST_PAIR_TEST = /usr/local/bin/hfst-pair-test
HFST_PROC = /usr/local/bin/hfst-proc
HFST_PROJECT = /usr/local/bin/hfst-project
HFST_PRUNE_ALPHABET = /usr/local/bin/hfst-prune-alphabet
HFST_PUSH_WEIGHTS = /usr/local/bin/hfst-push-weights
HFST_REGEXP2FST = /usr/local/bin/hfst-regexp2fst
HFST_REMOVE_EPSILONS = /usr/local/bin/hfst-remove-epsilons
HFST_REPEAT = /usr/local/bin/hfst-repeat
HFST_REVERSE = /usr/local/bin/hfst-reverse
HFST_REWEIGHT = /usr/local/bin/hfst-reweight
HFST_SPLIT = /usr/local/bin/hfst-split
HFST_STRINGS2FST = /usr/local/bin/hfst-strings2fst
HFST_SUBSTITUTE = /usr/local/bin/hfst-substitute
HFST_SUBTRACT = /usr/local/bin/hfst-subtract
HFST_SUMMARIZE = /usr/local/bin/hfst-summarize
HFST_TWOLC = /usr/local/bin/hfst-twolc
HFST_TXT2FST = /usr/local/bin/hfst-txt2fst
HFST_XFST = /usr/local/bin/hfst-xfst
HFST_XFST2FST = false
INSTALL = /usr/bin/install -c
INSTALL_DATA = ${INSTALL} -m 644
INSTALL_PROGRAM = ${INSTALL}
INSTALL_SCRIPT = ${INSTALL}
INSTALL_STRIP_PROGRAM = $(install_sh) -c -s
JV = /usr/bin/java
LEXC = /usr/local/bin/lexc
LIBOBJS = 
LIBS = 
LOOKUP = /usr/local/bin/lookup
LO_min_version = 3.6
LTLIBOBJS = 
MAKEINFO = ${SHELL} /Users/arppe/main/langs/chr/build-aux/missing makeinfo
MKDIR_P = ../../build-aux/install-sh -c -d
MT_AP_TARGET_LANGS = und
PACKAGE = giella-chr
PACKAGE_BUGREPORT = feedback@divvun.no
PACKAGE_NAME = giella-chr
PACKAGE_STRING = giella-chr 20110617
PACKAGE_TARNAME = giella-chr
PACKAGE_URL = http://divvun.no
PACKAGE_VERSION = 20110617
PATH_SEPARATOR = :
PRINTF = /usr/bin/printf
PYTHON = /opt/local/bin/python3.2
PYTHON_EXEC_PREFIX = ${exec_prefix}
PYTHON_PLATFORM = darwin
PYTHON_PREFIX = ${prefix}
PYTHON_VERSION = 3.2
RSYNC = /usr/bin/rsync
SAXON = false
SAXONJAR = /opt/local/share/java/saxon9he.jar
SEE = 
SET_MAKE = 
SHELL = /bin/sh
STRIP = 
TWOLC = /usr/local/bin/twolc
VERSION = 20110617
VISLCG3 = /opt/local/bin/vislcg3
VISLCG3_COMP = /opt/local/bin/cg-comp
WGET = /opt/local/bin/wget
XFST = /usr/local/bin/xfst
ZIP = /usr/bin/zip
abs_builddir = /Users/arppe/main/langs/chr/src/phonology
abs_srcdir = /Users/arppe/main/langs/chr/src/phonology
abs_top_builddir = /Users/arppe/main/langs/chr
abs_top_srcdir = /Users/arppe/main/langs/chr
am__leading_dot = .
am__tar = $${TAR-tar} chof - "$$tardir"
am__untar = $${TAR-tar} xf -
bindir = ${exec_prefix}/bin
build = x86_64-apple-darwin12.5.0
build_alias = 
build_cpu = x86_64
build_os = darwin12.5.0
build_vendor = apple
builddir = .
datadir = ${datarootdir}
datarootdir = ${prefix}/share
docdir = ${datarootdir}/doc/${PACKAGE_TARNAME}
dvidir = ${docdir}
exec_prefix = ${prefix}
host = x86_64-apple-darwin12.5.0
host_alias = 
host_cpu = x86_64
host_os = darwin12.5.0
host_vendor = apple
htmldir = ${docdir}
includedir = ${prefix}/include
infodir = ${datarootdir}/info
install_sh = ${SHELL} /Users/arppe/main/langs/chr/build-aux/install-sh
libdir = ${exec_prefix}/lib
libexecdir = ${exec_prefix}/libexec
localedir = ${datarootdir}/locale
localstatedir = ${prefix}/var
mandir = ${datarootdir}/man
mkdir_p = $(MKDIR_P)
oldincludedir = /usr/include
pdfdir = ${docdir}
pkgpyexecdir = ${pyexecdir}/giella-chr
pkgpythondir = ${pythondir}/giella-chr
prefix = /usr/local
program_transform_name = s,x,x,
psdir = ${docdir}
pyexecdir = ${exec_prefix}/lib/python3.2/site-packages
pythondir = ${prefix}/lib/python3.2/site-packages
sbindir = ${exec_prefix}/sbin
sharedstatedir = ${prefix}/com
srcdir = .
sysconfdir = ${prefix}/etc
target_alias = 
top_build_prefix = ../../
top_builddir = ../..
top_srcdir = ../..

#! @param GT_TWOLC_MAIN required, the source of phonology
#! @param GT_TWOLC_SUPPLEMENTS optional, other sources to distribute and
#! 		  compile for other things
GT_PHONOLOGY_MAIN = $(GTLANG)-phon.twolc
GT_PHONOLOGY_SUPPLEMENTS = 

#! @param GT_PHONOLOGY_MAIN required, the source of phonology
#! @param GT_PHONOLOGY_SUPPLEMENTS optional, other sources to distribute and
#! 		  compile for other things
#! Both @params are specified in $(GTLANG)/src/phonology/Makefile.am.
GT_PHONOLOGY_SRCS = $(GT_PHONOLOGY_MAIN) $(GT_PHONOLOGY_SUPPLEMENTS)

# All sources need to be included in the tarball
EXTRA_DIST = $(GT_PHONOLOGY_SRCS)

####### Automake targets: ########

# The rule transducer will be built, not installed
GT_PHONOLOGY = $(am__append_1) $(am__append_2)
noinst_DATA = $(GT_PHONOLOGY)

####### Silent builds: ########
# Silence macros defined here instead of using the include file to avoid
# warnings of double definitions of the macros by
# the src-phonetics-dir-include.am file - it includes both this file
# and the xfscript-include file. If they were to use the silent_build-include.am
# file, all macros would be defined twice, and AM would bork and stop.
AM_V_HTWOLC = $(AM_V_HTWOLC_$(V))
AM_V_HTWOLC_ = $(AM_V_HTWOLC_$(AM_DEFAULT_VERBOSITY))
AM_V_HTWOLC_0 = @echo "  HTWOLC   $@";
AM_V_TWOLC = $(AM_V_TWOLC_$(V))
AM_V_TWOLC_ = $(AM_V_TWOLC_$(AM_DEFAULT_VERBOSITY))
AM_V_TWOLC_0 = @echo "  TWOLC    $@";

# Let the verbosity of some command line tools follow the automake verbosity:
TWOLCVERBOSITY = $(if $(strip $(filter-out false,$(AM_V_P))), ,-q)

####### HFST build rules: ########

# hfst-twolc should by default resolve
HFSTTWOLFLAGS = --resolve

####### Silent builds: ########
# Silence macros defined here instead of using the include file to avoid
# warnings of double definitions of the macros by
# the src-phonetics-dir-include.am file - it includes both this file
# and the twolc-include file. If they were to use the silent_build-include.am
# file, all macros would be defined twice, and AM would bork and stop.
AM_V_HXFST = $(AM_V_HXFST_$(V))
AM_V_HXFST_ = $(AM_V_HXFST_$(AM_DEFAULT_VERBOSITY))
#AM_V_HXFST_0 = @echo "  HXFST    $@";
AM_V_HXFST_0 = @echo "  HFOMA    $@";
AM_V_XFST = $(AM_V_XFST_$(V))
AM_V_XFST_ = $(AM_V_XFST_$(AM_DEFAULT_VERBOSITY))
AM_V_XFST_0 = @echo "  XFST     $@";

# Let the verbosity of some command line tools follow the automake verbosity:
XFSTVERBOSITY = $(if $(strip $(filter-out false,$(AM_V_P))), ,-q)
##HFST_XFST_COMPILER = false
#HFST_XFST_COMPILER = $(HFST_XFST) $(XFSTVERBOSITY) -F

####### HFST build rules: ########

# Which hfst xfscript processor to use? Foma is default, there are still issues
# with hfst-xfst.
HFST_XFST_COMPILER = $(HFST_FOMA) $(XFSTVERBOSITY) -f
all: all-am

.SUFFIXES:
.SUFFIXES: .hfst .twolc .xfst
$(srcdir)/Makefile.in:  $(srcdir)/Makefile.am $(top_srcdir)/am-shared/src-phonology-dir-include.am $(top_srcdir)/am-shared/twolc-include.am $(top_srcdir)/am-shared/xfscript-include.am $(am__configure_deps)
	@for dep in $?; do \
	  case '$(am__configure_deps)' in \
	    *$$dep*) \
	      ( cd $(top_builddir) && $(MAKE) $(AM_MAKEFLAGS) am--refresh ) \
	        && { if test -f $@; then exit 0; else break; fi; }; \
	      exit 1;; \
	  esac; \
	done; \
	echo ' cd $(top_srcdir) && $(AUTOMAKE) --foreign src/phonology/Makefile'; \
	$(am__cd) $(top_srcdir) && \
	  $(AUTOMAKE) --foreign src/phonology/Makefile
.PRECIOUS: Makefile
Makefile: $(srcdir)/Makefile.in $(top_builddir)/config.status
	@case '$?' in \
	  *config.status*) \
	    cd $(top_builddir) && $(MAKE) $(AM_MAKEFLAGS) am--refresh;; \
	  *) \
	    echo ' cd $(top_builddir) && $(SHELL) ./config.status $(subdir)/$@ $(am__depfiles_maybe)'; \
	    cd $(top_builddir) && $(SHELL) ./config.status $(subdir)/$@ $(am__depfiles_maybe);; \
	esac;
$(top_srcdir)/am-shared/src-phonology-dir-include.am $(top_srcdir)/am-shared/twolc-include.am $(top_srcdir)/am-shared/xfscript-include.am:

$(top_builddir)/config.status: $(top_srcdir)/configure $(CONFIG_STATUS_DEPENDENCIES)
	cd $(top_builddir) && $(MAKE) $(AM_MAKEFLAGS) am--refresh

$(top_srcdir)/configure:  $(am__configure_deps)
	cd $(top_builddir) && $(MAKE) $(AM_MAKEFLAGS) am--refresh
$(ACLOCAL_M4):  $(am__aclocal_m4_deps)
	cd $(top_builddir) && $(MAKE) $(AM_MAKEFLAGS) am--refresh
$(am__aclocal_m4_deps):
tags TAGS:

ctags CTAGS:

cscope cscopelist:


distdir: $(DISTFILES)
	@srcdirstrip=`echo "$(srcdir)" | sed 's/[].[^$$\\*]/\\\\&/g'`; \
	topsrcdirstrip=`echo "$(top_srcdir)" | sed 's/[].[^$$\\*]/\\\\&/g'`; \
	list='$(DISTFILES)'; \
	  dist_files=`for file in $$list; do echo $$file; done | \
	  sed -e "s|^$$srcdirstrip/||;t" \
	      -e "s|^$$topsrcdirstrip/|$(top_builddir)/|;t"`; \
	case $$dist_files in \
	  */*) $(MKDIR_P) `echo "$$dist_files" | \
			   sed '/\//!d;s|^|$(distdir)/|;s,/[^/]*$$,,' | \
			   sort -u` ;; \
	esac; \
	for file in $$dist_files; do \
	  if test -f $$file || test -d $$file; then d=.; else d=$(srcdir); fi; \
	  if test -d $$d/$$file; then \
	    dir=`echo "/$$file" | sed -e 's,/[^/]*$$,,'`; \
	    if test -d "$(distdir)/$$file"; then \
	      find "$(distdir)/$$file" -type d ! -perm -700 -exec chmod u+rwx {} \;; \
	    fi; \
	    if test -d $(srcdir)/$$file && test $$d != $(srcdir); then \
	      cp -fpR $(srcdir)/$$file "$(distdir)$$dir" || exit 1; \
	      find "$(distdir)/$$file" -type d ! -perm -700 -exec chmod u+rwx {} \;; \
	    fi; \
	    cp -fpR $$d/$$file "$(distdir)$$dir" || exit 1; \
	  else \
	    test -f "$(distdir)/$$file" \
	    || cp -p $$d/$$file "$(distdir)/$$file" \
	    || exit 1; \
	  fi; \
	done
check-am: all-am
check: check-am
all-am: Makefile $(DATA)
installdirs:
install: install-am
install-exec: install-exec-am
install-data: install-data-am
uninstall: uninstall-am

install-am: all-am
	@$(MAKE) $(AM_MAKEFLAGS) install-exec-am install-data-am

installcheck: installcheck-am
install-strip:
	if test -z '$(STRIP)'; then \
	  $(MAKE) $(AM_MAKEFLAGS) INSTALL_PROGRAM="$(INSTALL_STRIP_PROGRAM)" \
	    install_sh_PROGRAM="$(INSTALL_STRIP_PROGRAM)" INSTALL_STRIP_FLAG=-s \
	      install; \
	else \
	  $(MAKE) $(AM_MAKEFLAGS) INSTALL_PROGRAM="$(INSTALL_STRIP_PROGRAM)" \
	    install_sh_PROGRAM="$(INSTALL_STRIP_PROGRAM)" INSTALL_STRIP_FLAG=-s \
	    "INSTALL_PROGRAM_ENV=STRIPPROG='$(STRIP)'" install; \
	fi
mostlyclean-generic:

clean-generic:

distclean-generic:
	-test -z "$(CONFIG_CLEAN_FILES)" || rm -f $(CONFIG_CLEAN_FILES)
	-test . = "$(srcdir)" || test -z "$(CONFIG_CLEAN_VPATH_FILES)" || rm -f $(CONFIG_CLEAN_VPATH_FILES)

maintainer-clean-generic:
	@echo "This command is intended for maintainers to use"
	@echo "it deletes files that may require special tools to rebuild."
clean: clean-am

clean-am: clean-generic clean-local mostlyclean-am

distclean: distclean-am
	-rm -f Makefile
distclean-am: clean-am distclean-generic

dvi: dvi-am

dvi-am:

html: html-am

html-am:

info: info-am

info-am:

install-data-am:

install-dvi: install-dvi-am

install-dvi-am:

install-exec-am:

install-html: install-html-am

install-html-am:

install-info: install-info-am

install-info-am:

install-man:

install-pdf: install-pdf-am

install-pdf-am:

install-ps: install-ps-am

install-ps-am:

installcheck-am:

maintainer-clean: maintainer-clean-am
	-rm -f Makefile
maintainer-clean-am: distclean-am maintainer-clean-generic

mostlyclean: mostlyclean-am

mostlyclean-am: mostlyclean-generic

pdf: pdf-am

pdf-am:

ps: ps-am

ps-am:

uninstall-am:

.MAKE: install-am install-strip

.PHONY: all all-am check check-am clean clean-generic clean-local \
	cscopelist-am ctags-am distclean distclean-generic distdir dvi \
	dvi-am html html-am info info-am install install-am \
	install-data install-data-am install-dvi install-dvi-am \
	install-exec install-exec-am install-html install-html-am \
	install-info install-info-am install-man install-pdf \
	install-pdf-am install-ps install-ps-am install-strip \
	installcheck installcheck-am installdirs maintainer-clean \
	maintainer-clean-generic mostlyclean mostlyclean-generic pdf \
	pdf-am ps ps-am tags-am uninstall uninstall-am


# All twolc targets should be built by suffix rules;
# just list them in some nice automake targets and you're good to go
.twolc.hfst:
	$(AM_V_HTWOLC)$(HFST_TWOLC) $(TWOLCVERBOSITY) \
			$(HFSTFLAGS) $(HFSTTWOLCFLAGS) -i $< -o $@

####### Xerox build rules: #######

# All twolc targets should be built by suffix rules;
# just list them in some nice automake targets and you're good to go
.twolc.xfst:
	$(AM_V_at)$(PRINTF) "read-grammar $<\ncompile\nsave-binary $@\nquit\n" \
		> $@.script
	$(AM_V_TWOLC)$(TWOLC) $(TWOLCVERBOSITY) < $@.script
	$(AM_V_at)rm -f $@.script

# vim: set ft=automake:

# HFST fst targets:
# Hfst will always build fst's that can be used directly - no need for a tmp
# file (not even for local modifications, since all modifications can be done
# directly in the xfscript file)-
%.hfst: %.xfscript
	$(AM_V_at)   cp $< $@.script
	$(AM_V_at)   $(PRINTF) "save stack $@" >> $@.script
	$(AM_V_HXFST)$(HFST_XFST_COMPILER) $@.script
	$(AM_V_at)   rm -f $@.script

####### Xerox build rules: #######
# Xerox fst's will need to be inverted *IFF* used stand-alone. xfscript files
# used for intersection & composition can and must be  used as is. For this
# reason we need to go via a tmp file, such that we can invert the tmp file for
# e.g. orthography conversion fst's. In the case of fst's for intersection and
# composition, the fst will just be copied from tmp to the target. These oper-
# ations are done in the *.am files which include this file.
%.tmp.xfst: %.xfscript
	$(AM_V_XFST)$(XFST) $(XFSTVERBOSITY) -l $< -e "save stack $@" -stop

# vim: set ft=automake:

##########################################
# General build rules included from here:#

# We need a target to properly finish the Xerox fst build:
%.xfst: %.tmp.xfst
	$(AM_V_CP)cp -f $< $@

####### Other targets: ###########
clean-local:
	-rm -f *.hfst *.xfst

# vim: set ft=automake:

# vim: set ft=automake:

# Tell versions [3.59,3.63) of GNU make to not export all variables.
# Otherwise a system limit (for SysV at least) may be exceeded.
.NOEXPORT:
